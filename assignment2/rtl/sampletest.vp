/*
 *  Performs Sample Test on Micropolygon
 * 
 *  Inputs:
 *    Sample and MicroPolygon Information
 * 
 *  Outputs:
 *    Subsample Hit Flag, Subsample location, and Micropolygon Information
 * 
 *  Function:
 *    Utilizing Edge Equations determine whether the 
 *    sample location lies inside the micropolygon.
 *    In the simple case of the triangle, this will
 *    occur when the sample lies to one side of all
 *    three lines (either all left or all right).
 *    This corresponds to the minterm 000 and 111.
 *    Additionally, if backface culling is performed,
 *    then only keep the case of all right.
 * 
 *  Edge Equation:
 *    For an edge defined as travelling from the 
 *    vertice (x_1,y_1) to (x_2,y_2), the sample
 *    (x_s,y_s) lies to the right of the line
 *    if the following expression is true:
 * 
 *    0 >  ( x_2 - x_1 ) * ( y_s - y_1 ) - ( x_s - x_1 ) * ( y_2 - y_1 )
 *  
 *    otherwise it lies on the line (exactly 0) or 
 *    to the left of the line.
 *
 *    This block evaluates the six edges described by the
 *    micropolygons vertices,  to determine which
 *    side of the lines the sample point lies.  Then it
 *    determines if the sample point lies in the micropolygon
 *    by or'ing the appropriate minterms.  In the case of 
 *    the triangle only three edges are relevant.  In the
 *    case of the quadrilateral five edges are relevant.
 *  
 * 
 *   Author: John Brunhaver
 *   Created:      Thu 07/23/09
 *   Last Updated: Tue 10/06/10
 *
 *   Copyright 2009 <jbrunhaver@gmail.com>   
 *
 *
 */

/******************************************************************************
 * PARAMETERIZATION
 * ***************************************************************************/
//; # module parameters
//; my $sig_fig    = parameter(Name=>'SigFig',
//;                            Val=>24, Min=>1, Step=>1, 
//;                            Doc=>"Bits in color and position.");
//; my $radix      = parameter(Name=>'Radix',
//;                            Val=>10, Min=>1, Step=>1, 
//;                            Doc=>"Fraction bits in color and position");
//; my $verts      = parameter(Name=>'Vertices',
//;                            Val=>3, Min=>3, Step=>1, 
//;                            Doc=>"Maximum Vertices in micropolygon");
//; my $axis       = parameter(Name=>'Axis',
//;                            Val=>3, Min=>1, Step=>1, 
//;                            Doc=>"Number of axis foreach vertex 3 is (x,y,z).");
//; my $colors     = parameter(Name=>'Colors',
//;                            Val=>3, Min=>1, Step=>1, 
//;                            Doc=>"Number of color channels");
//; my $pipe_depth = parameter(Name=>'PipelineDepth',
//;                            Val=>2, Min=>1, Step=>1, 
//;                            Doc=>"How many pipe stages are in this block");
//; 
//; # local variables
//; my $edges = ($verts == 3) ? 3 : 5 ;
//; my $shortSF = $sig_fig;
//; my $MRound = 2 * $shortSF - $radix;
//; my $x = 0;
//; my $y = 1;
//; my $cut_top_bits = 11;
//; my $cut_bot_bits = 0;

/* A Note on Signal Names:
 *
 * Most signals have a suffix of the form _RxxxxN 
 * where R indicates that it is a Raster Block signal
 * xxxx indicates the clock slice that it belongs to
 * and N indicates the type of signal that it is.
 * H indicates logic high, L indicates logic low,
 * U indicates unsigned fixed point, and S indicates
 * signed fixed point.
 * 
 */



module  `mname()`
  ( 
    input logic signed [`$sig_fig`-1:0]  poly_R16S[`$verts`-1:0][`$axis`-1:0], // Micropolygon to Iterate Over
    input logic 			 unsigned [`$sig_fig`-1:0] color_R16U[`$colors`-1:0] , // Color of Poly
    input logic signed [`$sig_fig`-1:0]  sample1_R16S[1:0], // Sample Location    
    input logic 			 validSamp1_R16H, // A valid sample location
    input logic signed [`$sig_fig`-1:0]  sample2_R16S[1:0], // Sample Location    
    input logic        validSamp2_R16H, // A valid sample location
    input logic 			 isQuad_R16H, //Micropolygon is quad

    input logic 			 clk, // Clock
    input logic 			 rst, // Reset
  
    output logic signed [`$sig_fig`-1:0] hit1_R18S[`$axis`-1:0], // Hit Location
    output logic signed [`$sig_fig`-1:0] hit2_R18S[`$axis`-1:0], // Hit Location
    output logic 			 unsigned [`$sig_fig`-1:0] color_R18U[`$colors`-1:0] , // Color of Poly
    output logic 			 hit_valid1_R18H,                   // Is hit good
    output logic       hit_valid2_R18H                   // Is hit good
    );
   
   // output for retiming registers	
   logic signed [`$sig_fig`-1:0] 	 hit1_R18S_retime[`$axis`-1:0];   // Hit Location
   logic signed [`$sig_fig`-1:0]   hit2_R18S_retime[`$axis`-1:0];   // Hit Location
   logic 				 unsigned [`$sig_fig`-1:0]  color_R18U_retime[`$colors`-1:0];   // Color of Poly
   logic 				 hit1_valid_R18H_retime;   // Is hit good
   logic         hit2_valid_R18H_retime;   // Is hit good
   // output for retiming registers	
   
   // Signals in Access Order  
   logic signed [`$sig_fig`-1:0] 	 poly_shift1_R16S[`$verts`-1:0][1:0]; // Micropolygon after coordinate shift 
   logic signed [`$sig_fig`-1:0]   poly_shift2_R16S[`$verts`-1:0][1:0]; // Micropolygon after coordinate shift 
   logic signed [`$sig_fig`-`$cut_top_bits`:0] 	 edge1_R16S[`$edges`-1:0][1:0][1:0]; // Edges 
   logic signed [`$sig_fig`-`$cut_top_bits`:0]   edge2_R16S[`$edges`-1:0][1:0][1:0]; // Edges 
   logic signed [2*`$shortSF`-1:0] 	 dist_lg1_R16S[`$edges`-1:0]; // Result of x_1 * y_2 - x_2 * y_1
   logic signed [2*`$shortSF`-1:0]   dist_lg2_R16S[`$edges`-1:0]; // Result of x_1 * y_2 - x_2 * y_1
   logic 				 hit_valid1_R16H ; // Output (YOUR JOB!)
   logic         hit_valid2_R16H ; // Output (YOUR JOB!)
   logic signed [`$sig_fig`-1:0]   hit1_R16S[`$axis`-1:0]; // Sample position
   logic signed [`$sig_fig`-1:0]   hit2_R16S[`$axis`-1:0]; // Sample position
   // Signals in Access Order 

   //////// DECLARE OTHER INTERMEDIATE SIGNALS YOU NEED


   //; if( $verts == 3 ) {

    //////// BEGIN YOUR IMPLEMENTATION

   // Your job is to produce the value for hit_valid_R16H signal, which indicates whether a sample lies inside the micropolygon.
   // hit_valid_R16H is high if validSamp_R16H && sample inside micropolygon (with back face culling)
   // Consider the following steps:

   //// (1) Shift X, Y coordinates such that the fragment resides on the (0,0) position.

   //; for( my $i = 0 ; $i < $verts ; $i++ ) {
   //;  for( my $j = 0 ; $j < 2 ; $j++ ) {
   always_comb begin
      poly_shift1_R16S[`$i`][`$j`] <= poly_R16S[`$i`][`$j`] - sample1_R16S[`$j`];
      poly_shift2_R16S[`$i`][`$j`] <= poly_R16S[`$i`][`$j`] - sample2_R16S[`$j`]; 
   end
   //;  }
   //; }
 //ddjflkds
   //// (2) Organize edges (form three edges for triangles)


   //; for( my $i = 0 ; $i < $verts ; $i++ ) {
  //;  for( my $j = 0 ; $j < 2 ; $j++ ) {
   always_comb begin
     // assign edge_R16S (I made them so that they are the shifted edges)
     // edge_R16S[edge#][x || y][x1 || x2] = poly_shift_R16S[vertex#][x || y]
     edge1_R16S[`$i`][`$j`][`$x`] = poly_shift1_R16S[(`$j`+`$i`)%3][`$x`][`$sig_fig`-`$cut_top_bits`:`$cut_bot_bits`];
     edge1_R16S[`$i`][`$j`][`$y`] = poly_shift1_R16S[(`$j`+`$i`)%3][`$y`][`$sig_fig`-`$cut_top_bits`:`$cut_bot_bits`];
     edge2_R16S[`$i`][`$j`][`$x`] = poly_shift2_R16S[(`$j`+`$i`)%3][`$x`][`$sig_fig`-`$cut_top_bits`:`$cut_bot_bits`];
     edge2_R16S[`$i`][`$j`][`$y`] = poly_shift2_R16S[(`$j`+`$i`)%3][`$y`][`$sig_fig`-`$cut_top_bits`:`$cut_bot_bits`];
   end
   //;  }
   //; }

   //// (3) Calculate distance x_1 * y_2 - x_2 * y_1

   //; for( my $i = 0 ; $i < $verts ; $i++ ) {
   always_comb begin
     // assign dist_lg_R16S
     dist_lg1_R16S[`$i`] = edge1_R16S[`$i`][0][`$x`]*edge1_R16S[`$i`][1][`$y`] - edge1_R16S[`$i`][1][`$x`]*edge1_R16S[`$i`][0][`$y`];
     dist_lg2_R16S[`$i`] = edge2_R16S[`$i`][0][`$x`]*edge2_R16S[`$i`][1][`$y`] - edge2_R16S[`$i`][1][`$x`]*edge2_R16S[`$i`][0][`$y`];
   end   
   //; }  

   //// (4) Check distance and assign hit_valid_R16H.

   always_comb begin
     // assign hit_valid_R16H
     hit_valid1_R16H = (dist_lg1_R16S[0] <= 0) && (dist_lg1_R16S[1] < 0) && (dist_lg1_R16S[2] <= 0) && validSamp1_R16H;
     hit_valid2_R16H = (dist_lg2_R16S[0] <= 0) && (dist_lg2_R16S[1] < 0) && (dist_lg2_R16S[2] <= 0) && validSamp2_R16H;
   end   

   //////// END YOUR IMPLEMENTATION


   //; } elsif( $edges == 5 ) {
   always_comb begin
      assert( 0 ) else $fatal( "Sample test unit not configured for 4 Vertices\n");
   end  
   //; }



   //Calculate Depth as depth of first vertex
   // Note that a barrycentric interpolation would
   // be more accurate
   //; if( $verts == 3) {
   always_comb begin
      hit1_R16S[1:0] = sample1_R16S[1:0]; //Make sure you use unjittered sample
      hit1_R16S[2] = poly_R16S[0][2]; // z value equals the z value of the first vertex
      hit2_R16S[1:0] = sample2_R16S[1:0]; //Make sure you use unjittered sample
      hit2_R16S[2] = poly_R16S[0][2]; // z value equals the z value of the first vertex
   end
   //; }
   //TODO: Calculate Depth by berrycentric intropolation


   /* Flop R16 to R18_retime with retiming registers*/
   
   //; my $d_samp_r1_1 = generate( 'dff2', "d_samp_r1_1", 
   //;                        BitWidth=>$sig_fig,
   //;                        ArraySize1=>$axis,
   //;                        PipelineDepth=>$pipe_depth-1,
   //;                        Retime=>'YES' );
   `$d_samp_r1_1->instantiate()` (
				.in(hit1_R16S) , 
				.clk(clk) , .reset(rst), .en(1'b1),
				.out(hit1_R18S_retime));

   //; my $d_samp_r1_2 = generate( 'dff2', "d_samp_r1_2", 
   //;                        BitWidth=>$sig_fig,
   //;                        ArraySize1=>$axis,
   //;                        PipelineDepth=>$pipe_depth-1,
   //;                        Retime=>'YES' );
   `$d_samp_r1_2->instantiate()` (
        .in(hit2_R16S) , 
        .clk(clk) , .reset(rst), .en(1'b1),
        .out(hit2_R18S_retime));
   
   //; my $d_samp_r2 = generate( 'dff2', "d_samp_r2", 
   //;                        BitWidth=>$sig_fig,
   //;                        ArraySize1=>$colors,
   //;                        PipelineDepth=>$pipe_depth-1,
   //;                        Retime=>'YES' );
   `$d_samp_r2->instantiate()`(
			       .in(color_R16U) , 
			       .clk(clk) , .reset(rst), .en(1'b1),
			       .out(color_R18U_retime));
   
   //; my $d_samp_r3_1 = generate( 'dff', "d_samp_r3_1", 
   //;                        BitWidth=>1,
   //;                        PipelineDepth=>$pipe_depth-1,
   //;                        Retime=>'YES' );
   `$d_samp_r3_1->instantiate()` (
				.in(hit_valid1_R16H) , 
				.clk(clk) , .reset(rst), .en(1'b1),
				.out(hit_valid1_R18H_retime));

   //; my $d_samp_r3_2 = generate( 'dff', "d_samp_r3_2", 
   //;                        BitWidth=>1,
   //;                        PipelineDepth=>$pipe_depth-1,
   //;                        Retime=>'YES' );
   `$d_samp_r3_2->instantiate()` (
        .in(hit_valid2_R16H) , 
        .clk(clk) , .reset(rst), .en(1'b1),
        .out(hit_valid2_R18H_retime));
   
   /* Flop R16 to R18_retime with retiming registers*/
   
   
   /* Flop R18_retime to R18 with fixed registers */
   
   //; my $d_samp_f1_1 = generate( 'dff2', "d_samp_f1_1", 
   //;                        BitWidth=>$sig_fig,
   //;                        ArraySize1=>$axis,
   //;                        PipelineDepth=>1,
   //;                        Retime=>'NO' );
   `$d_samp_f1_1->instantiate()` (
				.in(hit1_R18S_retime) , 
				.clk(clk) , .reset(rst), .en(1'b1),
				.out(hit1_R18S));

   //; my $d_samp_f1_2 = generate( 'dff2', "d_samp_f1_2", 
   //;                        BitWidth=>$sig_fig,
   //;                        ArraySize1=>$axis,
   //;                        PipelineDepth=>1,
   //;                        Retime=>'NO' );
   `$d_samp_f1_2->instantiate()` (
        .in(hit2_R18S_retime) , 
        .clk(clk) , .reset(rst), .en(1'b1),
        .out(hit2_R18S));
   
   //; my $d_samp_f2 = generate( 'dff2', "d_samp_f2", 
   //;                        BitWidth=>$sig_fig,
   //;                        ArraySize1=>$colors,
   //;                        PipelineDepth=>1,
   //;                        Retime=>'NO' );
   `$d_samp_f2->instantiate()`(
			       .in(color_R18U_retime) , 
			       .clk(clk) , .reset(rst), .en(1'b1),
			       .out(color_R18U));
   
   //; my $d_samp_f3_1 = generate( 'dff', "d_samp_f3_1", 
   //;                        BitWidth=>1,
   //;                        PipelineDepth=>1,
   //;                        Retime=>'NO' );
   `$d_samp_f3_1->instantiate()` (
				.in(hit_valid1_R18H_retime) , 
				.clk(clk) , .reset(rst), .en(1'b1),
				.out(hit_valid1_R18H));

   //; my $d_samp_f3_2 = generate( 'dff', "d_samp_f3_2", 
   //;                        BitWidth=>1,
   //;                        PipelineDepth=>1,
   //;                        Retime=>'NO' );
   `$d_samp_f3_2->instantiate()` (
        .in(hit_valid2_R18H_retime) , 
        .clk(clk) , .reset(rst), .en(1'b1),
        .out(hit_valid2_R18H));
   
   /* Flop R18_retime to R18 with fixed registers */ 

endmodule




